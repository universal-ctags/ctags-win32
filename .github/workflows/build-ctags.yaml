name: Build

on:
  push:
    branches:
      - master
  pull_request:
  schedule:
    - cron: '0 1 * * *'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag name (in ctags repo) to run'
        required: true
        type: string
      base_commit:
        description: 'Base commit or tag in ctags-win32 repo'
        required: true
        type: string

permissions:
  contents: read

env:
  CTAGSREPO: https://github.com/universal-ctags/ctags

  # Account for committing
  USER_NAME: 'ctags-win32 CI'
  USER_EMAIL: 'ctags-win32-ci@users.noreply.github.com'

  # Escape sequences
  COL_RED: "\x1b[31m"
  COL_GREEN: "\x1b[32m"
  COL_YELLOW: "\x1b[33m"
  COL_RESET: "\x1b[m"

jobs:
  build:
    runs-on: windows-latest

    # Run only on PR or on our repository.
    if: (github.event_name == 'pull_request') || (github.repository == 'universal-ctags/ctags-win32')

    strategy:
      fail-fast: false
      matrix:
        include:
          - { arch: x64,       msystem: MINGW64 }
          - { arch: x86,       msystem: MINGW32 }
          - { arch: clang-x64, msystem: CLANG64 }

    outputs:
      skip: ${{ steps.check.outputs.skip }}

    defaults:
      run:
        shell: msys2 {0}

    steps:
    - name: Initalize
      id: init
      shell: bash
      run: |
        #echo "date=$(date +%Y%m%d)" >> $GITHUB_OUTPUT
        git config --global core.autocrlf input

    - uses: actions/checkout@v5
      if: github.event_name != 'workflow_dispatch'
    - uses: actions/checkout@v5
      if: github.event_name == 'workflow_dispatch'
      with:
        ref: ${{inputs.base_commit}}

    - name: Checkout and update the submodule
      shell: bash
      run: |
        # We need the latest tag. (Is the depth 20 enough?)
        git submodule update --init --depth 20
        cd ctags
        if [ "${{github.event_name}}" = 'workflow_dispatch' ]; then
          git checkout "${{inputs.tag}}"
        else
          git switch master
          git pull --ff-only
        fi
        cd ..

    - name: Get changelog
      id: changelog
      shell: bash
      run: |
        mkdir package/artifacts
        #if [ ! -d ctags ] || [ "$(git -C ctags tag)" = "" ]; then
        #  exit 0
        #fi

        cd ctags
        # Get the latest tag of the submodule.
        exacttag=yes
        if ! latesttag=$(git describe --tags --exact-match --match 'v*' 2> /dev/null); then
          if ! latesttag=$(git describe --tags --exact-match 2> /dev/null); then
            latesttag=$(git describe --tags --always)
            exacttag=no
          fi
        fi
        # Compose a new tag name for this repository.
        if [ "$exacttag" = "yes" ]; then
          newtag="$latesttag"
        else
          newtag="$(date --rfc-3339=date)/$latesttag"
        fi
        #echo "ref=${latesttag}" >> $GITHUB_OUTPUT
        #echo "newtag=${newtag}" >> $GITHUB_OUTPUT
        echo $latesttag > ../package/artifacts/latesttag.txt
        echo $latesttag > ../ctagsver.txt
        echo $newtag > ../package/artifacts/newtag.txt
        git rev-parse HEAD > ../package/artifacts/latestrev.txt

        cd ..
        echo "ChangeLog in Markdown:"
        git submodule summary | grep '^  > ' | \
          sed -e 's/\([][_*^<`\\]\)/\\\1/g' \
              -e 's/^  >/*/' \
              -e "s!#\([0-9][0-9]*\)![#\1]($CTAGSREPO/issues/\1)!" | \
          tee ./package/artifacts/changelog.md || :
        echo
        echo "ChangeLog in text:"
        git submodule summary | grep '^  > ' | \
          sed -e 's/\([][_*^<`\\]\)/\\\1/g' \
              -e 's/^  >/*/' | \
          tee ./package/artifacts/changelog.txt || :

    - name: Check changes
      id: check
      shell: bash
      run: |
        if git diff --exit-code HEAD ctagsver.txt; then
          echo ${COL_YELLOW}No updates.${COL_RESET}
          if [ "${{ github.event_name }}" = 'pull_request' ]; then
            # Don't skip on pull_request even if there are no updates.
            echo "skip=no" >> $GITHUB_OUTPUT
          else
            echo "skip=yes" >> $GITHUB_OUTPUT
          fi
        else
          echo "skip=no" >> $GITHUB_OUTPUT
        fi

    - uses: msys2/setup-msys2@v2
      if: steps.check.outputs.skip == 'no'
      with:
        msystem: ${{ matrix.msystem }}
        update: true
        install: git make automake autoconf
        pacboy: toolchain:p python-sphinx:p jansson:p libxml2:p libyaml:p pcre2:p

    - name: Build
      if: steps.check.outputs.skip == 'no'
      run: |
        cd ctags
        ./autogen.sh
        ./configure --disable-external-sort --enable-static
        make -j2

    - name: Test
      if: steps.check.outputs.skip == 'no'
      timeout-minutes: 10
      run: |
        cd ctags
        file ctags.exe
        file readtags.exe
        ./ctags.exe --version
        make check

    - name: Package
      if: steps.check.outputs.skip == 'no'
      run: |
        cd ctags
        make -C docs html
        make -C man html
        mv docs/_build/html ../package/docs
        rm -r ../package/docs/_sources

        ver=$(sed -e 's|/|_|g' < ../package/artifacts/newtag.txt)

        filelist="ctags.exe readtags.exe README.md"
        dirlist="docs license man"
        cp ${filelist} ../package/
        cp -r win32/license ../package/
        cp COPYING ../package/license/
        cp win32/mkstemp/COPYING.MinGW-w64-runtime.txt ../package/license
        mkdir ../package/man
        cp man/*.html ../package/man/

        stripdebug() {
          objcopy --only-keep-debug $1 $1.debug
          strip $1
          objcopy --add-gnu-debuglink=$1.debug $1
        }

        cd ../package
        for f in *.exe; do
          stripdebug $f
        done
        "/c/Program Files/7-Zip/7z.exe" a -mx=9 ./artifacts/ctags-${ver}-${{ matrix.arch }}.zip ${filelist} ${dirlist}
        "/c/Program Files/7-Zip/7z.exe" a -mx=9 ./artifacts/ctags-${ver}-${{ matrix.arch }}.debuginfo.zip *.exe.debug
        cd ..

    - name: Upload Artifact
      if: steps.check.outputs.skip == 'no'
      uses: actions/upload-artifact@v5
      with:
        name: ctags-${{ matrix.arch }}
        path: ./package/artifacts

  release:
    runs-on: ubuntu-latest
    needs: [build]
    if: (github.event_name != 'pull_request') && (needs.build.outputs.skip == 'no')

    permissions:
      contents: write # to create release

    steps:
    - uses: actions/checkout@v5
      if: github.event_name != 'workflow_dispatch'
      with:
        submodules: true
    - uses: actions/checkout@v5
      if: github.event_name == 'workflow_dispatch'
      with:
        ref: ${{inputs.base_commit}}
        ssh-key: ${{ secrets.CTAGS_WIN32_DEPLOY_KEY }}

    - name: Checkout the submodule
      if: github.event_name == 'workflow_dispatch'
      shell: bash
      run: |
        git submodule update --init --depth 20
        git -C ctags checkout "${{inputs.tag}}"

    - name: Download Artifact (x86)
      uses: actions/download-artifact@v4
      with:
        name: ctags-x86
        path: ctags-x86

    - name: Download Artifact (x64)
      uses: actions/download-artifact@v4
      with:
        name: ctags-x64
        path: ctags-x64

    - name: Download Artifact (clang-x64)
      uses: actions/download-artifact@v4
      with:
        name: ctags-clang-x64
        path: ctags-clang-x64

    - name: Get changelog
      id: changelog
      run: |
        newtag=$(cat ctags-x64/newtag.txt)
        echo "newtag=${newtag}" >> $GITHUB_OUTPUT
        cat << EOF > changelog.md
        ![Github Downloads (by Release)](https://img.shields.io/github/downloads/${{ github.repository }}/${newtag}/total.svg)

        ### Changes:

        $(cat ctags-x64/changelog.md)
        EOF
        cp ctags-x64/latesttag.txt ctagsver.txt

    - name: Commit and push
      id: commit
      run: |
        if [ "${{github.event_name}}" = 'workflow_dispatch' ] && [ "${{inputs.base_commit}}" != 'master' ]; then
          git switch -c "work-${{inputs.tag}}"
        fi
        git -C ctags fetch origin
        git -C ctags checkout $(cat ctags-x64/latestrev.txt)
        if git diff --quiet HEAD ctagsver.txt; then
          echo ${COL_YELLOW}No updates.${COL_RESET}
          exit 1  # This should not happen.
        fi
        git config --local user.name "$USER_NAME"
        git config --local user.email "$USER_EMAIL"
        git commit -a \
          -m "ctags: Update to $(cat ctags-x64/latesttag.txt)" \
          -m "$(cat ctags-x64/changelog.txt)"
        git tag "${{ steps.changelog.outputs.newtag }}"
        git push origin HEAD --tags

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.changelog.outputs.newtag }}
        name: ${{ steps.changelog.outputs.newtag }}
        body_path: changelog.md
        draft: false
        prerelease: true
        files: |
          ./ctags-x86/ctags-*-x86.zip
          ./ctags-x86/ctags-*-x86.debuginfo.zip
          ./ctags-x64/ctags-*-x64.zip
          ./ctags-x64/ctags-*-x64.debuginfo.zip
          ./ctags-clang-x64/ctags-*-x64.zip
          ./ctags-clang-x64/ctags-*-x64.debuginfo.zip

# vim: ts=2 sw=2 sts=2 et
